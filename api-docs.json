{
	"swagger": "2.0",
	"info": {
		"description": "paymentWithMyBank",
		"version": "1.0",
		"title": "paymentWithMyBank",
		"termsOfService": "github",
		"license": {
			"name": "PayWithMyBank"
		}
	},
	"host": "uat.paywithmybank.com",
	"basePath": "/",
	"tags": [{
		"name": "paymentWithMyBank",
		"description": "Controller"
	}],

	"paths": {
		"/api/v1/payment/{paymentId}": {
			"get": {
				"tags": [
					"paymentById"
				],
				"summary": "Get a  payment.",
				"description": "You have to provide a valid payment ID.",
				"operationId": "getPaymentUsingGET",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/xml",
					"application/json"
				],
				"parameters": [{
					"name": "paymentId",
					"in": "path",
					"description": "The paymentId of the payment.",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Everything worked as expected",
						"schema": {
							"$ref": "#/definitions/payment"
						}
					},
					"400": {
						"description": "Often missing a required parameter"
					},
					"401": {
						"description": "No valid accessId and accessKey provided"
					},
					"500": {
						"description": "Something went wrong on PayWithMyBank's end"
					}
				}
			}
		},
		"/api/v1/payments": {
			"get": {
				"tags": [
					"getAllPayment"
				],
				"summary": "Get all payment.",
				"description": "Returns a list of payments previously created",
				"operationId": "getAllPaymentUsingGET",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/xml",
					"application/json"
				],
				"parameters": [{
					"name": "paymentId",
					"in": "path",
					"description": "The paymentId of the payment.",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Everything worked as expected",
						"schema": {

							"$ref": "#/definitions/ListPayment"
						}
					},
					"400": {
						"description": "Often missing a required parameter"
					},
					"401": {
						"description": "No valid accessId and accessKey provided"
					},
					"500": {
						"description": "Something went wrong on PayWithMyBank's end"
					}
				}
			}
		},
		"/api/v1/transactions/{transactionId}/updateRecurrence": {
			"post": {
				"tags": [
					"recurrence"
				],
				"summary": "Update the payment recurrence details.",
				"description": "Returns a list of payments previously created",
				"operationId": "updatePaymentRecurrence",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/xml",
					"application/json"
				],
				"parameters": [{
						"name": "transactionId",
						"in": "path",
						"description": "The identifier of the authorize or pay transaction",
						"required": true,
						"type": "string"
					},
					{
						"name": "merchantReference",
						"in": "query",
						"description": "The initial merchant reference value sent to establish the transaction.",
						"required": true,
						"type": "string"
					},
					{
						"name": "recurrence",
						"in": "body",
						"description": "recurrence",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Recurrence"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Everything worked as expected",
						"schema": {

							"$ref": "#/definitions/Recurrence"
						}
					},
					"400": {
						"description": "Often missing a required parameter"
					},
					"401": {
						"description": "No valid accessId and accessKey provided"
					},
					"500": {
						"description": "Something went wrong on PayWithMyBank's end"
					}
				}
			}
		},
		"/api/v1/transactions/{transactionId}": {
			"get": {
				"tags": [
					"getTransaction"
				],
				"summary": "Get  Transactions by Id.",
				"description": "Returns the transaction details",
				"operationId": "getTransactionById",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/xml",
					"application/json"
				],
				"parameters": [{
					"name": "transactionId",
					"in": "path",
					"description": "A unique PayWithMyBank transaction.",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Everything worked as expected",
						"schema": {

							"$ref": "#/definitions/transaction"
						}
					},
					"400": {
						"description": "Often missing a required parameter"
					},
					"401": {
						"description": "No valid accessId and accessKey provided"
					},
					"500": {
						"description": "Something went wrong on PayWithMyBank's end"
					}
				}
			}
		},
		"/api/v1/transactions": {
			"get": {
				"tags": [
					"getAllTransaction"
				],
				"summary": "Get All Transactions",
				"description": "Returns a list of transactions previously created",
				"operationId": "getAllTransactionUsingGet",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/xml",
					"application/json"
				],
				"parameters": [{
					"name": "expand",
					"in": "query",
					"description": "passing the value.",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Everything worked as expected",
						"schema": {

							"$ref": "#/definitions/transactionObjectArrayList"
						}
					},
					"400": {
						"description": "Often missing a required parameter"
					},
					"401": {
						"description": "No valid accessId and accessKey provided"
					},
					"500": {
						"description": "Something went wrong on PayWithMyBank's end"
					}
				}
			}
		},

		"/api/v1/transactions/{transactionId}/cancel": {
			"post": {
				"tags": [
					"cancel Transactions"
				],
				"summary": "Merchant can cancel a previous transaction.",
				"description": "This service enables a merchant to cancel a previous transaction that have not been processed yet",
				"operationId": "cancelTransaction",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/xml",
					"application/json"
				],
				"parameters": [{
						"name": "transactionId",
						"in": "path",
						"description": "The identifier of the authorize or pay transaction",
						"required": true,
						"type": "string"
					},
					{
						"name": "merchantReference ",
						"in": "query",
						"description": "external reference from the merchant",
						"required": true,
						"type": "string"
					},
					{
						"name": "message ",
						"in": "query",
						"description": "An optional message describing the reason for the cancelation.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Everything worked as expected",
						"schema": {

							"$ref": "#/definitions/transactionCancel"
						}
					},
					"400": {
						"description": "Often missing a required parameter"
					},
					"401": {
						"description": "No valid accessId and accessKey provided"
					},
					"500": {
						"description": "Something went wrong on PayWithMyBank's end"
					}
				}
			}
		},
		"/api/v1/transactions/{transactionId}/capture": {
			"post": {
				"tags": [
					"capture Transactions"
				],
				"summary": "operation creates a new transaction",
				"description": "Capture collects money amounts (minimum of 0.99) from customer bank account",
				"operationId": "captureTransaction",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/xml",
					"application/json"
				],
				"parameters": [{
						"name": "transactionId",
						"in": "path",
						"description": "The identifier of the authorize or pay transaction",
						"required": true,
						"type": "string"
					},
					{
						"name": "merchantReference ",
						"in": "query",
						"description": "external reference from the merchant",
						"required": true,
						"type": "string"
					},
					{
						"name": "amount ",
						"in": "query",
						"description": "The amount to be captured",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Everything worked as expected",
						"schema": {

							"$ref": "#/definitions/transactionCapture"
						}
					},
					"400": {
						"description": "Often missing a required parameter"
					},
					"401": {
						"description": "No valid accessId and accessKey provided"
					},
					"500": {
						"description": "Something went wrong on PayWithMyBank's end"
					}
				}
			}
		},
		"/api/v1/transactions/{transactionId}/refund": {
			"post": {
				"tags": [
					"refund"
				],
				"summary": "A capture or pay transaction can only be refunded",
				"description": "Refunds a previously completed capture or pay transaction (minimum of 0.99).",
				"operationId": "refund",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/xml",
					"application/json"
				],
				"parameters": [{
						"name": "transactionId",
						"in": "path",
						"description": "The identifier of the authorize or pay transaction",
						"required": true,
						"type": "string"
					},
					{
						"name": "merchantReference ",
						"in": "query",
						"description": "external reference from the merchant",
						"required": true,
						"type": "string"
					},
					{
						"name": "amount ",
						"in": "query",
						"description": "The amount to be refunded",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Everything worked as expected",
						"schema": {

							"$ref": "#/definitions/transactionRefund"
						}
					},
					"400": {
						"description": "Often missing a required parameter"
					},
					"401": {
						"description": "No valid accessId and accessKey provided"
					},
					"500": {
						"description": "Something went wrong on PayWithMyBank's end"
					}
				}
			}
		},
		"/api/v1/transactions/{transactionId}/deposit": {
			"post": {
				"tags": [
					"deposit"
				],
				"summary": "Creates a new transaction called a Deposit transaction",
				"description": "Deposit sends money amounts (minimum of 0.99) to a customer bank account ",
				"operationId": "deposit",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/xml",
					"application/json"
				],
				"parameters": [{
						"name": "transactionId",
						"in": "path",
						"description": "The identifier of the authorize or pay transaction",
						"required": true,
						"type": "string"
					},
					{
						"name": "merchantReference ",
						"in": "query",
						"description": "external reference from the merchant",
						"required": true,
						"type": "string"
					},
					{
						"name": "amount ",
						"in": "query",
						"description": "The amount to be sent.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Everything worked as expected",
						"schema": {

							"$ref": "#/definitions/transactionDeposit"
						}
					},
					"400": {
						"description": "Often missing a required parameter"
					},
					"401": {
						"description": "No valid accessId and accessKey provided"
					},
					"500": {
						"description": "Something went wrong on PayWithMyBank's end"
					}
				}
			}
		},
		"/api/v1/transactions/{transactionId}/reclaim": {
			"post": {
				"tags": [
					"reclaim"
				],
				"summary": "Creates a new transaction called a Deposit transaction",
				"description": "A deposit transaction can only be reclaimed after the bank money sent has been processed and completed",
				"operationId": "reclaim",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/xml",
					"application/json"
				],
				"parameters": [{
						"name": "transactionId",
						"in": "path",
						"description": "The identifier of the authorize or pay transaction",
						"required": true,
						"type": "string"
					},
					{
						"name": "merchantReference ",
						"in": "query",
						"description": "external reference from the merchant",
						"required": true,
						"type": "string"
					},
					{
						"name": "amount ",
						"in": "query",
						"description": "The amount to be reclaimed",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Everything worked as expected",
						"schema": {

							"$ref": "#/definitions/transactionReclaim"
						}
					},
					"400": {
						"description": "Often missing a required parameter"
					},
					"401": {
						"description": "No valid accessId and accessKey provided"
					},
					"500": {
						"description": "Something went wrong on PayWithMyBank's end"
					}
				}
			}
		},
		"/api/v1/transactions/{transactionId}/payment/customer/verify": {
			"get": {
				"tags": [
					"verifiyCustomer"
				],
				"summary": "verify the customer profile data supplied by the merchant",
				"description": "The transaction must be of type Authorize or Pay, and must be in status Authorize or OnHold.",
				"operationId": "verifyCustomerGet",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/xml",
					"application/json"
				],
				"parameters": [{
						"name": "transactionId",
						"in": "path",
						"description": "The identifier of the authorize or pay transaction",
						"required": true,
						"type": "string"
					}

				],
				"responses": {
					"200": {
						"description": "Everything worked as expected",
						"schema": {

							"$ref": "#/definitions/Match"
						}
					},
					"400": {
						"description": "Often missing a required parameter"
					},
					"401": {
						"description": "No valid accessId and accessKey provided"
					},
					"500": {
						"description": "Something went wrong on PayWithMyBank's end"
					}
				}
			}
		},
		"/api/v1/transactions/{transactionId}/payment/account/verify": {
			"post": {
				"tags": [
					"verifyFinancialInstitution"
				],
				"summary": " verify financial institution account",
				"description": " instant verification to verify their provided bank account data",
				"operationId": "verifyFinancialInstitutionPost",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/xml",
					"application/json"
				],
				"parameters": [{
						"name": "transactionId",
						"in": "path",
						"description": "The identifier of the authorize or pay transaction",
						"required": true,
						"type": "string"
					},
					{
						"name": "challengeDeposit  ",
						"in": "query",
						"description": "The amount of the challenge deposit",
						"required": false,
						"type": "string"
					}

				],
				"responses": {
					"200": {
						"description": "Everything worked as expected",
						"schema": {

							"$ref": "#/definitions/FinancialInstitutionAccountVerfication"
						}
					},
					"400": {
						"description": "Often missing a required parameter"
					},
					"401": {
						"description": "No valid accessId and accessKey provided"
					},
					"500": {
						"description": "Something went wrong on PayWithMyBank's end"
					}
				}
			}
		},
		"/api/v1/transactions/{transactionId}/events": {
			"get": {
				"tags": [
					"listTransactionEvents"
				],
				"summary": "Get the list of Transaction Events",
				"description": "This service enables a merchant to obtain the transaction event list",
				"operationId": "listTransactionEventsGet",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/xml",
					"application/json"
				],
				"parameters": [{
					"name": "transactionId",
					"in": "path",
					"description": "The identifier of the authorize or pay transaction",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Everything worked as expected",
						"schema": {

							"$ref": "#/definitions/eventTransactionArrayList"
						}
					},
					"400": {
						"description": "Often missing a required parameter"
					},
					"401": {
						"description": "No valid accessId and accessKey provided"
					},
					"500": {
						"description": "Something went wrong on PayWithMyBank's end"
					}
				}
			}
		},
		"/api/v1/merchants": {
			"get": {
				"tags": [
					"merchantList"
				],
				"summary": "List of Merchant",
				"description": "Retrieves a list of merchants previously created.",
				"operationId": "merchantListGet",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/xml",
					"application/json"
				],
				"parameters": [{
					"name": "name ",
					"in": "query",
					"description": "merchants name",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Everything worked as expected",
						"schema": {

							"$ref": "#/definitions/merchantsObjArray"
						}
					},
					"400": {
						"description": "Often missing a required parameter"
					},
					"401": {
						"description": "No valid accessId and accessKey provided"
					},
					"500": {
						"description": "Something went wrong on PayWithMyBank's end"
					}
				}
			}
		},
		"/api/v1/customers/{customerId}": {
			"get": {
				"tags": [
					"customerDetails"
				],
				"summary": "Get customer By id",
				"description": "Retrieves the details of a customer that was previously created",
				"operationId": "customerDetailsGet",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/xml",
					"application/json"
				],
				"parameters": [{
						"name": "customerId",
						"in": "path",
						"description": "The identifier of the customer to be retrieved",
						"required": true,
						"type": "string"
					}

				],
				"responses": {
					"200": {
						"description": "Everything worked as expected",
						"schema": {

							"$ref": "#/definitions/Customers"
						}
					},
					"400": {
						"description": "Often missing a required parameter"
					},
					"401": {
						"description": "No valid accessId and accessKey provided"
					},
					"500": {
						"description": "Something went wrong on PayWithMyBank's end"
					}
				}
			},
			"delete": {
				"tags": [
					"deleteCustomer"
				],
				"summary": "can delete customer",
				"description": "Permanently deletes a customer. It cannot be undone.",
				"operationId": "deleteCustomerDel",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/xml",
					"application/json"
				],
				"parameters": [{
						"name": "customerId",
						"in": "path",
						"description": "The identifier of the customer to be retrieved",
						"required": true,
						"type": "string"
					}

				],
				"responses": {
					"200": {
						"description": "Everything worked as expected"

					},
					"400": {
						"description": "Often missing a required parameter"
					},
					"401": {
						"description": "No valid accessId and accessKey provided"
					},
					"500": {
						"description": "Something went wrong on PayWithMyBank's end"
					}
				}
			}
		},

		"/api/v1/customers": {
			"post": {
				"tags": [
					"createCustomer"
				],
				"summary": "update the customer",
				"description": "Updates the specified customer by setting values in parameter and object",
				"operationId": "updateCusotmerPut",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/xml",
					"application/json"
				],
				"parameters": [{
						"name": "customerId",
						"in": "path",
						"description": "The identifier of the customer to be retrieved",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "customer object",
						"description": "Updates the specified customer by setting values in parameter and object",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Customers"
						}
					}

				],
				"responses": {
					"200": {
						"description": "Everything worked as expected",
						"schema": {

							"$ref": "#/definitions/Customers"
						}
					},
					"400": {
						"description": "Often missing a required parameter"
					},
					"401": {
						"description": "No valid accessId and accessKey provided"
					},
					"500": {
						"description": "Something went wrong on PayWithMyBank's end"
					}
				}
			},
			"put": {
				"tags": [
					"updateCustomer"
				],
				"summary": "update customer",
				"description": "creates the new customer with their data",
				"operationId": "createcustomerDetailsPost",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/xml",
					"application/json"
				],
				"parameters": [{
						"name": "customerId",
						"in": "path",
						"description": "The identifier of the customer to be retrieved",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "customer object",
						"description": "Updates the specified customer by setting values in parameter and object",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Customers"
						}
					}

				],
				"responses": {
					"200": {
						"description": "Everything worked as expected",
						"schema": {

							"$ref": "#/definitions/Customers"
						}
					},
					"400": {
						"description": "Often missing a required parameter"
					},
					"401": {
						"description": "No valid accessId and accessKey provided"
					},
					"500": {
						"description": "Something went wrong on PayWithMyBank's end"
					}
				}
			}
		}



	},

	"definitions": {
		"payment": {
			"type": "object",
			"properties": {
				"paymentId": {
					"type": "string"
				},
				"paymentType": {
					"type": "integer"
				},

				"merchant": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/merchants"
					}
				},
				"merchantReference": {
					"type": "string"
				},
				"customer": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/Customers"
					}
				},
				"address": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/Address"
					}
				},

				"fingerprint": {
					"type": "string"
				},

				"verfication": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/Verification"
					}
				},
				"description": {
					"type": "string"
				},
				"currency": {
					"type": "string"
				},
				"amount": {
					"type": "string"
				},
				"recurrence": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/Recurrence"
					}
				},
				"paymentProvider": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/paymentProviders"
					}
				},
				"auth": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/auth"
					}
				},
				"pending": {
					"type": "string"
				},
				"paid": {
					"type": "string"
				},
				"refunded": {
					"type": "string"
				},
				"reversed": {
					"type": "string"
				},
				"balance": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "timestamp"
				},
				"updatedAt": {
					"type": "string",
					"format": "timestamp"
				},
				"recordVersion": {
					"type": "integer"
				}
			}
		},

		"merchants": {
			"type": "object",
			"properties": {
				"merchantId": {
					"type": "string"
				},
				"name": {
					"type": "string"
				}

			}
		},
		"merchantsObjArray": {
			"type": "object",
			"properties": {
				"transaction": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/merchants"
					}
				}
			}
		},
		"Verification": {
			"type": "object",
			"properties": {
				"status": {
					"type": "integer",
					"enum": [
						"1",
						"2",
						"3",
						"4"
					]
				},
				"mode": {
					"type": "integer",
					"enum": [
						"1",
						"2",
						"3",
						"4"
					]
				},
				"verifyCustomer": {
					"type": "boolean"
				}
			}
		},
		"paymentProviders": {
			"type": "object",
			"properties": {
				"paymentProviderId": {
					"type": "string"
				},
				"type": {
					"type": "integer"
				},
				"name": {
					"type": "string"
				}

			}
		},

		"auth": {
			"type": "object",
			"properties": {
				"token": {
					"type": "string"
				},
				"status": {
					"type": "string"
				},
				"statusMessage": {
					"type": "string",
					"enum": [
						"Pending",
						"Authorized",
						"Finished",
						"Expired",
						"Failed",
						"Canceled",
						"Voided"
					]
				}
			}
		},
		"Recurrence": {
			"type": "object",
			"properties": {

				"startDate": {
					"type": "string",
					"format": "timestamp"
				},
				"endDate": {
					"type": "string",
					"format": "timestamp"
				},
				"nextOccurrence": {
					"type": "string",
					"format": "timestamp"
				},
				"recurringAmount": {
					"type": "string"
				},
				"debtSettlement": {
					"type": "string"
				},
				"frequency": {
					"type": "integer"
				},
				"frequencyUnit": {
					"type": "integer"
				},
				"FrequencyUnitType": {
					"type": "integer",
					"enum": [
						"1",
						"2",
						"3",
						"4"
					]
				}
			}
		},
		"transaction": {
			"type": "object",
			"properties": {

				"transactionId": {
					"type": "string"
				},
				"originalTransactionId": {
					"type": "string"
				},
				"transactionType": {
					"type": "string",
					"enum": [
						"0",
						"1",
						"2",
						"3",
						"4",
						"5",
						"6",
						"7",
						"8"
					]
				},
				"payment": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/payment"
					}
				},

				"currency": {
					"type": "string"
				},
				"amount": {
					"type": "string"
				},
				"pending": {
					"type": "string"
				},
				"paid": {
					"type": "string"
				},
				"refunded": {
					"type": "string"
				},
				"reversed": {
					"type": "string"
				},
				"balance": {
					"type": "string"
				},

				"paymentProviderTransaction": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/paymentProviderTransaction"
					}
				},
				"status": {
					"type": "integer",
					"enum": [
						"0",
						"1",
						"2",
						"3",
						"4",
						"5",
						"6",
						"7",
						"8",
						"9",
						"10",
						"11",
						"12",
						"13",
						"14"
					]
				},
				"statusMessage": {
					"type": "string"
				},
				"ip": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "timestamp"
				},
				"processedAt": {
					"type": "string",
					"format": "timestamp"
				},
				"completedAt": {
					"type": "string",
					"format": "timestamp"
				},
				"updatedAt": {
					"type": "string",
					"format": "timestamp"
				},
				"recordVersion": {
					"type": "integer"
				}
			}
		},
		"transactionObjectArrayList": {
			"type": "object",
			"properties": {
				"transaction": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/transaction"
					}
				}
			}
		},

		"paymentProviderTransaction": {
			"type": "object",
			"properties": {
				"paymentProviderTransactionId": {
					"type": "string"
				},
				"status": {
					"type": "string"
				},
				"statusMessage": {
					"type": "string"
				}
			}
		},
		"ListPayment": {
			"type": "object",
			"properties": {
				"payment": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/payment"
					}
				}
			}
		},
		"ListTransaction": {
			"type": "object",
			"properties": {
				"transaction": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/transaction"
					}
				},
				"customer": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/Customers"
					}
				},
				"address": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/Address"
					}
				},
				"fingerprint": {
					"type": "string"
				},
				"verfication": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/Verification"
					}
				},
				"paymentProvider": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/paymentProviders"
					}
				},
				"auth": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/auth"
					}
				}
			}
		},
		"Customers": {
			"type": "object",
			"properties": {

				"customerId": {
					"type": "string"
				},
				"externalId": {
					"type": "string"
				},
				"merchantId": {
					"type": "string",
					"format": "timestamp"
				},
				"name": {
					"type": "string"
				},
				"driverLicense": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/DriverLicense"
					}
				},
				"address": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/Address"
					}
				},
				"phone": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"createdAt": {
					"type": "integer",
					"format": "timestamp"
				},
				"updatedAt": {
					"type": "integer",
					"format": "timestamp"
				}
			}
		},

		"Address": {
			"type": "object",
			"properties": {
				"address1": {
					"type": "string"
				},
				"address2": {
					"type": "string"
				},
				"city": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"zip": {
					"type": "string"
				},
				"country": {
					"type": "string"
				}

			}
		},
		"DriverLicense": {
			"type": "object",
			"properties": {
				"number": {
					"type": "string"
				},
				"state": {
					"type": "string"
				}
			}
		},
		"transactionCancel": {
			"type": "object",
			"properties": {
				"transaction": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/transaction"
					}
				},
				"payment": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/payment"
					}
				},
				"customer": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/Customers"
					}
				},
				"verfication": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/Verification"
					}
				},
				"paymentProvider": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/paymentProviders"
					}
				},
				"auth": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/auth"
					}
				}
			}
		},
		"transactionCapture": {
			"type": "object",
			"properties": {
				"transaction": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/transaction"
					}
				},
				"payment": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/payment"
					}
				},
				"customer": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/Customers"
					}
				},
				"verfication": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/Verification"
					}
				},
				"paymentProvider": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/paymentProviders"
					}
				},
				"auth": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/auth"
					}
				}
			}
		},
		"transactionRefund": {
			"type": "object",
			"properties": {
				"transaction": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/transaction"
					}
				},
				"payment": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/payment"
					}
				},
				"customer": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/Customers"
					}
				},
				"verfication": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/Verification"
					}
				},
				"paymentProvider": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/paymentProviders"
					}
				},
				"auth": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/auth"
					}
				}
			}
		},
		"transactionDeposit": {
			"type": "object",
			"properties": {
				"transaction": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/transaction"
					}
				},
				"payment": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/payment"
					}
				},
				"customer": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/Customers"
					}
				},
				"verfication": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/Verification"
					}
				},
				"paymentProvider": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/paymentProviders"
					}
				},
				"auth": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/auth"
					}
				}
			}
		},
		"transactionReclaim": {
			"type": "object",
			"properties": {
				"transaction": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/transaction"
					}
				},
				"payment": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/payment"
					}
				},
				"customer": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/Customers"
					}
				},
				"verfication": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/Verification"
					}
				},
				"paymentProvider": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/paymentProviders"
					}
				},
				"auth": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/auth"
					}
				}
			}
		},
		"FinancialInstitutionAccount": {
			"type": "object",
			"properties": {
				"nameOnAccountoptional": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"type": {
					"type": "integer",
					"enum": [
						"-1",
						"0",
						"1",
						"2"
					]
				},
				"accountNumber": {
					"type": "integer"
				},
				"routingNumber": {
					"type": "integer"
				},
				"verification": {
					"type": "object",
					"items": {
						"$ref": "#/definitions/FinancialInstitutionAccountVerfication"
					}
				}

			}
		},
		"FinancialInstitutionAccountVerfication": {
			"type": "object",
			"properties": {
				"verified": {
					"type": "boolean"
				},
				"type": {
					"type": "integer",
					"enum": [
						"1",
						"2"
					]
				},
				"numberOfTries": {
					"type": "integer"
				},
				"numberOfAttemptsLeft": {
					"type": "integer"
				}
			}
		},
		"Match": {
			"type": "object",
			"properties": {
				"attribute": {
					"type": "string"
				},
				"result": {
					"type": "integer",
					"enum": [
						"-1",
						"0",
						"1",
						"2"

					]
				},
				"updatedAt": {
					"type": "string",
					"format": "timestamp"
				},
				"since": {
					"type": "string",
					"format": "timestamp"
				}
			}
		},
		"event": {
			"type": "object",
			"properties": {
				"eventId": {
					"type": "string"
				},
				"eventType": {
					"type": "string",
					"enum": [
						"Update",
						"Establish",
						"Authorize",
						"Process",
						"Complete",
						"Cancel",
						"Fail",
						"Expire",
						"Deny",
						"Refund",
						"Dispute",
						"Reconcile",
						"Reverse",
						"Hold",
						"Feedback"
					]
				},
				"objectId": {
					"type": "string"
				},
				"message": {
					"type": "string"
				},
				"attributes": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/transactionArrayList"
					}
				},
				"createdAt": {
					"type": "string",
					"format": "timestamp"
				}
			}
		},
		"eventArray": {
			"type": "object",
			"properties": {
				"eventId": {
					"type": "string"
				},
				"eventType": {
					"type": "string",
					"enum": [
						"Update",
						"Establish",
						"Authorize",
						"Process",
						"Complete",
						"Cancel",
						"Fail",
						"Expire",
						"Deny",
						"Refund",
						"Dispute",
						"Reconcile",
						"Reverse",
						"Hold",
						"Feedback"
					]
				},
				"objectId": {
					"type": "string"
				},
				"message": {
					"type": "string"
				},
				"attributes": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/transactionArrayList"
					}
				},
				"createdAt": {
					"type": "string",
					"format": "timestamp"
				}
			}
		},
		"attribute": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"value": {
					"type": "string"
				}
			}
		},
		"eventTransactionArrayList": {
			"type": "object",
			"properties": {
				"events": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/eventArray"
					}
				}
			}
		},
		"transactionArrayList": {
			"type": "object",
			"properties": {
				"transaction": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/attribute"
					}
				}
			}
		}
	}
}